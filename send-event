const { EventHubProducerClient, EventHubConsumerClient } = require('@azure/event-hubs');

const connectionString = '<YOUR_EVENT_HUB_CONNECTION_STRING>';
const consumerGroup = '<YOUR_CONSUMER_GROUP>';
const eventHubName = '<YOUR_EVENT_HUB_NAME>';
const testMessage = 'Test message from Node.js';
const timeout = 10000; // Time to wait for the message to be received (in milliseconds)

async function sendTestMessage() {
    const producer = new EventHubProducerClient(connectionString, eventHubName);
    const batch = await producer.createBatch();

    batch.tryAdd({ body: testMessage });
    
    await producer.sendBatch(batch);
    await producer.close();
    console.log('Test message sent.');
}

async function receiveTestMessage() {
    const consumer = new EventHubConsumerClient(consumerGroup, connectionString, {
        eventHubName
    });

    let received = false;

    const processEvents = async (events, context) => {
        for (const event of events) {
            if (event.body === testMessage) {
                console.log(`Received test message: ${event.body}`);
                received = true;
            }
        }
    };

    const processError = async (err, context) => {
        console.error(`Error occurred: ${err.message}`);
    };

    const subscription = consumer.subscribe({
        processEvents,
        processError
    }, {
        startingPosition: "@latest" // Start reading at the latest position
    });

    // Wait for the test message to be received
    await new Promise(resolve => setTimeout(resolve, timeout));

    // Stop receiving after the timeout
    await consumer.close();

    if (!received) {
        console.error('Test message not received.');
    } else {
        console.log('Test message received successfully.');
    }
}

async function main() {
    try {
        await sendTestMessage();
        await receiveTestMessage();
    } catch (err) {
        console.error('Error in test:', err);
    }
}

main().catch(err => console.error('Main function error:', err));
