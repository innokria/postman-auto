const { EventHubConsumerClient, AbortController } = require('@azure/event-hubs');

const connectionString = '<YOUR_EVENT_HUB_CONNECTION_STRING>';
const consumerGroup = '<YOUR_CONSUMER_GROUP>';
const eventHubName = '<YOUR_EVENT_HUB_NAME>';
const maxRetries = 5; // Number of retry attempts
const retryDelay = 5000; // Delay between retries in milliseconds

async function main() {
    let retries = 0;
    let connected = false;
    
    while (retries < maxRetries && !connected) {
        try {
            console.log(`Attempting to connect (attempt ${retries + 1})...`);

            // Create a client to interact with Event Hub
            const client = new EventHubConsumerClient(consumerGroup, connectionString, {
                eventHubName
            });

            // Register a handler to process events
            client.subscribe({
                processEvents: async (events, context) => {
                    for (const event of events) {
                        console.log(`Received event: ${JSON.stringify(event.body)}`);
                    }
                },
                processError: async (err, context) => {
                    console.error(`Error occurred: ${err}`);
                }
            });

            // Wait for a while to simulate a connection being active
            await new Promise(resolve => setTimeout(resolve, 10000));

            // Close the client gracefully
            await client.close();

            connected = true;
            console.log('Connected successfully.');

        } catch (error) {
            console.error(`Connection failed: ${error.message}`);

            // Check if the error is an ECONNRESET and handle it
            if (error.code === 'ECONNRESET') {
                console.log('Connection reset. Retrying...');
                retries++;
                await new Promise(resolve => setTimeout(resolve, retryDelay));
            } else {
                // Handle other types of errors
                console.error('An unexpected error occurred:', error);
                break;
            }
        }
    }

    if (!connected) {
        console.error('Failed to connect after multiple attempts.');
    }
}

main().catch(err => console.error('Main function error:', err));
