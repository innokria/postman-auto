const { EventHubConsumerClient } = require('@azure/event-hubs');

const connectionString = '<YOUR_EVENT_HUB_CONNECTION_STRING>';
const consumerGroup = '<YOUR_CONSUMER_GROUP>';
const eventHubName = '<YOUR_EVENT_HUB_NAME>';
const hoursToRead = 24; // Duration in hours

async function main() {
    const client = new EventHubConsumerClient(consumerGroup, connectionString, {
        eventHubName
    });

    // Calculate the starting timestamp for 24 hours ago
    const now = new Date();
    const startTimestamp = now.getTime() - (hoursToRead * 60 * 60 * 1000); // 24 hours ago in milliseconds

    // This will hold all the messages
    const messages = [];

    // Define the processEvents handler
    const processEvents = async (events, context) => {
        for (const event of events) {
            const eventTimestamp = new Date(event.enqueuedTimeUtc).getTime();
            
            // Check if the message timestamp is within the last 24 hours
            if (eventTimestamp >= startTimestamp) {
                messages.push({
                    body: event.body,
                    timestamp: event.enqueuedTimeUtc
                });
            }
        }
    };

    // Define the processError handler
    const processError = async (err, context) => {
        console.error(`Error occurred: ${err.message}`);
    };

    // Subscribe to events from all partitions
    const subscription = client.subscribe({
        processEvents,
        processError
    }, {
        startingPosition: "@earliest" // Start reading from the earliest position
    });

    // Keep the connection active for a specified duration
    console.log(`Reading messages from the last ${hoursToRead} hours...`);
    await new Promise(resolve => setTimeout(resolve, 1000 * 60 * 10)); // Run for 10 minutes

    // Close the client
    await client.close();

    // Output collected messages
    console.log(`Collected ${messages.length} messages from the last ${hoursToRead} hours.`);
    messages.forEach(msg => {
        console.log(`Timestamp: ${msg.timestamp}, Message: ${JSON.stringify(msg.body)}`);
    });
}

main().catch(err => console.error('Main function error:', err));
